defaults: &defaults
  docker:
    - image: circleci/node:10-browsers
  working_directory: ~/dist
  environment:
    DOCKER_REPO: "711655675495.dkr.ecr.us-east-1.amazonaws.com"
    DOCKER_FRONTEND: "titus-frontend"
    DOCKER_BACKEND: "titus-backend"
version: 2
jobs:
  install:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Git checkout infrastructure
          command: git clone git@github.com:nearform/titus-deploy.git infrastructure
      - restore_cache:
          name: "Restore build cache"
          keys: 'v1-node_modules'
      - run:
          name: install
          command: npm install
      - save_cache:
          name: "Saving node_modules folder"
          key: 'v1-node_modules'
          paths:
            - ~/dist/node_modules
      - persist_to_workspace:
          root: .
          paths:
            - .
  build:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Build the production frontend bundle
          command: |
            set -e
            cd packages/titus-frontend
            npm run create:env
            npm run build
      - persist_to_workspace:
          root: .
          paths:
            - .
  lint:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run: npm run lint:all
  test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run: 
          name: test
          command: |
            npm run create:env
            npm run test
  lighthouse:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run: npm run lighthouse
      - store_artifacts:
          path: packages/titus-frontend/lighthouse-report.html
          destination: titus-frontend-lighthouse-report.html
  push-containers:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get -y install python-dev
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      - run:
          name: Build the frontend Docker containers
          command: |
            set -e
            cd packages/titus-frontend
            docker build -t ${DOCKER_REPO}/${DOCKER_FRONTEND}:${CIRCLE_WORKFLOW_ID} -f docker/Dockerfile .
      - run:
          name: Build the backend Docker containers
          command: |
            set -e
            cd packages/titus-backend/
            npm prune --production
            docker build -t ${DOCKER_REPO}/${DOCKER_BACKEND}:${CIRCLE_WORKFLOW_ID} -f docker/Dockerfile .
      - run:
          name: Push the Docker containers to the registry
          command: |
            set -e
            # Login the AWS ECR registry
            eval $(aws ecr get-login --no-include-email --region us-east-1)
            # Push the frontend container
            echo -e "Pushing the frontend container\n"
            docker push ${DOCKER_REPO}/${DOCKER_FRONTEND}:${CIRCLE_WORKFLOW_ID}
            # Push the backend container
            echo -e "Pushing the backend container\n"
            docker push ${DOCKER_REPO}/${DOCKER_BACKEND}:${CIRCLE_WORKFLOW_ID}
  release-preproduction:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get -y install python-dev
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      - run:
          name: Install AWS IAM Authenticator
          command: |
            sudo curl "https://amazon-eks.s3-us-west-2.amazonaws.com/1.11.5/2018-12-06/bin/linux/amd64/aws-iam-authenticator" -o /usr/local/bin/aws-iam-authenticator
            sudo chmod a+x /usr/local/bin/aws-iam-authenticator
      - run:
          name: EKS k8s configuration
          command:
            aws eks update-kubeconfig --name titus-noise --region eu-central-1
      - run:
           name: Install kubectl
           command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            sudo cp kubectl /usr/local/bin/kubectl
            sudo chmod a+x /usr/local/bin/kubectl
            kubectl get nodes
      - run:
          name: Install Helm
          command: |
            curl https://storage.googleapis.com/kubernetes-helm/helm-v2.9.0-linux-amd64.tar.gz -o "helm.tar.gz"
            tar xvzf helm.tar.gz
            ls ./linux-amd64/
            sudo cp ./linux-amd64/helm /usr/local/bin/helm
            helm init --client-only
            helm list
      - run:
            name: Deploy to preproduction
            command: |
                helm upgrade --install titus-dev ./infrastructure/titus-starter-kit  -f ./infrastructure/titus-starter-kit/values.dev.yaml \
                --set docker.images.frontend=${DOCKER_REPO}/${DOCKER_FRONTEND}:${CIRCLE_WORKFLOW_ID} \
                --set docker.images.backend=${DOCKER_REPO}/${DOCKER_BACKEND}:${CIRCLE_WORKFLOW_ID}
  release-production:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Git checkout infrastructure
          command: git clone git@github.com:nearform/titus-deploy.git infrastructure
      - setup_remote_docker:
          docker_layer_catching: true
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get -y install python-dev
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      - run:
          name: Install AWS IAM Authenticator
          command: |
            sudo curl "https://amazon-eks.s3-us-west-2.amazonaws.com/1.11.5/2018-12-06/bin/linux/amd64/aws-iam-authenticator" -o /usr/local/bin/aws-iam-authenticator
            sudo chmod a+x /usr/local/bin/aws-iam-authenticator
      - run:
          name: EKS k8s configuration
          command:
            aws eks update-kubeconfig --name titus-noise --region eu-central-1
      - run:
           name: Install kubectl
           command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            sudo cp kubectl /usr/local/bin/kubectl
            sudo chmod a+x /usr/local/bin/kubectl
            kubectl get nodes
      - run:
          name: Install Helm
          command: |
            curl https://storage.googleapis.com/kubernetes-helm/helm-v2.9.0-linux-amd64.tar.gz -o "helm.tar.gz"
            tar xvzf helm.tar.gz
            ls ./linux-amd64/
            sudo cp ./linux-amd64/helm /usr/local/bin/helm
            helm init --client-only
            helm list
      - run:
            name: Promote pre Prod image to Prod
            command: |
                helm upgrade --install titus-prod ./infrastructure/titus-starter-kit  -f ./infrastructure/titus-starter-kit/values.prod.yaml \
                --set docker.images.frontend=$(kubectl get deployment titus-dev-frontend -o=jsonpath='{$.spec.template.spec.containers[:1].image}') \
                --set docker.images.backend=$(kubectl get deployment titus-dev-backend -o=jsonpath='{$.spec.template.spec.containers[:1].image}')

workflows:
  version: 2
  untagged_build:
    jobs:
      - install
      - lint:
          requires:
            - install
      - test:
          requires:
            - install
      - build:
          requires:
            - test
            - lint
            - install
      - push-containers:
          requires:
            - build
          filters:
            branches:
                only:
                    - master
            tags:
                ignore: /.*/
      - release-preproduction:
          requires:
            - push-containers
          filters:
            branches:
                only:
                    - master
            tags:
              ignore: /.*/
  tagged_deployment:
    jobs:
      - release-production:
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - /v[0-9]+(\.[0-9]+).*/
