defaults: &defaults
  docker:
    - image: circleci/node:10-browsers

version: 2
jobs:
  install:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: install
          command: npm install
      - run:
          name: bootstrap
          command: npm run bootstrap
      - persist_to_workspace:
          root: .
          paths:
            - .
  build:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Build the production frontend bundle
          command: |
            set -e
            cd packages/titus-kitchen-sink
            mv .env.prod .env
            npm run build
      - persist_to_workspace:
          root: .
          paths:
            - .
  lint:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run: npm run lint:all
  test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run: npm run test:all
  lighthouse:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run: npm run lighthouse
      - store_artifacts:
          path: packages/titus-kitchen-sink/lighthouse-report.html
          destination: titus-kitchen-sink-lighthouse-report.html
  push-containers:
    <<: *defaults
    environment:
      DOCKER_REPO: "711655675495.dkr.ecr.eu-west-1.amazonaws.com"
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get -y install python-dev
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      - run:
          name: Build the backend Docker containers
          command: |
            cd packages/titus-kitchen-sink-backend/
            mv config/prod.js config/default.js
            docker build -t ${DOCKER_REPO}/titus-kitchen-sink-backend:${CIRCLE_SHA1} -f docker/api/Dockerfile.prod .
            set -e
      - run:
          name: Push the Backend Docker image to the registry
          command: |
            set -e
            export AWS_ACCESS_KEY_ID=$NOISE_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$NOISE_AWS_SECRET_ACCESS_KEY
            # Login the AWS ECR registry
            eval $(aws ecr get-login --no-include-email --region eu-west-1)
            # Create repositories
            eval $(aws ecr create-repository --repository-name titus-kitchen-sink-backend --region eu-west-1) || true
            # Push the frontend container
            echo -e "Pushing the backend container\n"
            docker push ${DOCKER_REPO}/titus-kitchen-sink-backend:${CIRCLE_SHA1}
  upload-frontend-to-s3:
    <<: *defaults
    environment:
      S3_BUCKET: noise-website
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get -y install python-dev
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      - run:
          name: Push frontend to an S3 bucket
          command: |
            set -e
            cd packages/titus-kitchen-sink
            export AWS_ACCESS_KEY_ID=$NOISE_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$NOISE_AWS_SECRET_ACCESS_KEY
            aws s3 sync build s3://${S3_BUCKET} --delete --acl public-read
  helm-upgrade:
    docker:
    - image: petrkohut/eks-helm:latest
    steps:
      - attach_workspace:
          at: .
      - run:
          name: helm upgrade
          command: |
            export AWS_ACCESS_KEY_ID=$NOISE_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$NOISE_AWS_SECRET_ACCESS_KEY
            echo $KUBE_CONFIG | base64 -d > kube-config.yaml
            export KUBECONFIG=./kube-config.yaml
            helm init
            helm upgrade -i --debug --tiller-namespace kube-system --set backend.image.tag=${CIRCLE_SHA1} titus-backend ./chart
workflows:
  version: 2
  test_and_build:
    jobs:
      - install
      - build:
          requires:
            - install
      - lint:
          requires:
            - install
      - test:
          requires:
            - lint
      - lighthouse:
          requires:
            - build
      - push-containers:
          requires:
            - build
            - test
            - lint
            - lighthouse
          #filters:
          #  branches:
          #    only: master
      - hold:
          type: approval
          requires:
            - push-containers
          #filters:
          #  branches:
          #    only: master
      - upload-frontend-to-s3:
          requires:
            - hold
      - helm-upgrade:
          requires:
            - hold
