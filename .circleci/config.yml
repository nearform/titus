defaults: &defaults
  docker:
    - image: circleci/node:10-browsers

version: 2
jobs:
  install:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: submodule init
          command: git submodule init && git submodule update
      - run:
          name: noise submodule init
          command: cd infrastructure && git submodule init && git submodule update
      - run:
          name: install
          command: npm install
      - run:
          name: bootstrap
          command: npm run bootstrap
      - persist_to_workspace:
          root: .
          paths:
            - .
  build:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Build the production frontend bundle
          command: |
            set -e
            cd packages/titus-fe-showcase
            mv .env.prod .env
            npm run build
      - persist_to_workspace:
          root: .
          paths:
            - .
  lint:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run: npm run lint:all
  test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run: npm run test:all
  lighthouse:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run: npm run lighthouse
      - store_artifacts:
          path: packages/titus-backend/lighthouse-report.html
          destination: titus-backend-lighthouse-report.html
  push-containers:
    <<: *defaults
    environment:
      DOCKER_REPO: "711655675495.dkr.ecr.us-east-1.amazonaws.com"
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get -y install python-dev
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      - run:
          name: Build the frontend Docker containers
          command: |
            set -e
            cd packages/titus-backend
            docker build -t ${DOCKER_REPO}/titus-backend:${CIRCLE_WORKFLOW_ID} -f docker/Dockerfile .
      - run:
          name: Build the backend Docker containers
          command: |
            set -e
            cd packages/titus-be-showcase/
            mv config/prod.js config/default.js
            docker build -t ${DOCKER_REPO}/titus-be-showcase:${CIRCLE_WORKFLOW_ID} -f docker/api/Dockerfile.prod .
      - run:
          name: Push the Docker containers to the registry
          command: |
            set -e
            # Login the AWS ECR registry
            eval $(aws ecr get-login --no-include-email --region us-east-1)
            # Push the frontend container
            echo -e "Pushing the frontend container\n"
            docker push ${DOCKER_REPO}/titus-backend:${CIRCLE_WORKFLOW_ID}
            # Push the backend container
            echo -e "Pushing the backend container\n"
            docker push ${DOCKER_REPO}/titus-be-showcase:${CIRCLE_WORKFLOW_ID}
  release-preproduction:
    <<: *defaults
    environment:
      DOCKER_REPO: "711655675495.dkr.ecr.us-east-1.amazonaws.com"
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get -y install python-dev
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      - run:
          name: Install AWS IAM Authenticator
          command: |
            sudo curl "https://amazon-eks.s3-us-west-2.amazonaws.com/1.11.5/2018-12-06/bin/linux/amd64/aws-iam-authenticator" -o /usr/local/bin/aws-iam-authenticator
            sudo chmod a+x /usr/local/bin/aws-iam-authenticator
      - run:
          name: EKS k8s configuration
          command:
            aws eks update-kubeconfig --name titus-noise --region eu-west-1
      - run:
          name: Install Helm
          command: |
            curl https://storage.googleapis.com/kubernetes-helm/helm-v2.9.0-linux-amd64.tar.gz -o "helm.tar.gz"
            tar xvzf helm.tar.gz
            ls ./linux-amd64/
            sudo cp ./linux-amd64/helm /usr/local/bin/helm
            helm init --client-only
            helm list
      - run:
           name: Install kubectl
           command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            sudo cp kubectl /usr/local/bin/kubectl
            sudo chmod a+x /usr/local/bin/kubectl
            kubectl get nodes
      - run:
            name: Deploy to preproduction
            command: |
                helm upgrade --install titus ./infrastructure/helm \
                   --set docker.images.preproduction.backend=${DOCKER_REPO}/titus-be-showcase:${CIRCLE_WORKFLOW_ID} \
                   --set docker.images.preproduction.frontend=${DOCKER_REPO}/titus-backend:${CIRCLE_WORKFLOW_ID} \
                   --set docker.images.production.backend=$(kubectl get deployment titus-backend -o=jsonpath='{$.spec.template.spec.containers[:1].image}') \
                   --set docker.images.production.frontend=$(kubectl get deployment titus-frontend -o=jsonpath='{$.spec.template.spec.containers[:1].image}')
  release-production:
    <<: *defaults
    environment:
      DOCKER_REPO: "711655675495.dkr.ecr.us-east-1.amazonaws.com"
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          docker_layer_catching: true
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get -y install python-dev
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      - run:
          name: Install AWS IAM Authenticator
          command: |
            sudo curl "https://amazon-eks.s3-us-west-2.amazonaws.com/1.11.5/2018-12-06/bin/linux/amd64/aws-iam-authenticator" -o /usr/local/bin/aws-iam-authenticator
            sudo chmod a+x /usr/local/bin/aws-iam-authenticator
      - run:
          name: EKS k8s configuration
          command:
            aws eks update-kubeconfig --name titus-noise --region eu-west-1
      - run:
          name: Install Helm
          command: |
            curl https://storage.googleapis.com/kubernetes-helm/helm-v2.9.0-linux-amd64.tar.gz -o "helm.tar.gz"
            tar xvzf helm.tar.gz
            ls ./linux-amd64/
            sudo cp ./linux-amd64/helm /usr/local/bin/helm
            helm init --client-only
            helm list
      - run:
           name: Install kubectl
           command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            sudo cp kubectl /usr/local/bin/kubectl
            sudo chmod a+x /usr/local/bin/kubectl
            kubectl get nodes
      - run:
            name: Deploy to production
            command: |
                helm upgrade --install titus ./infrastructure/helm \
                   --set docker.images.preproduction.backend=$(kubectl get deployment titus-backend-preprod -o=jsonpath='{$.spec.template.spec.containers[:1].image}') \
                   --set docker.images.preproduction.frontend=$(kubectl get deployment titus-frontend-preprod -o=jsonpath='{$.spec.template.spec.containers[:1].image}') \
                   --set docker.images.production.backend=${DOCKER_REPO}/titus-be-showcase:${CIRCLE_WORKFLOW_ID} \
                   --set docker.images.production.frontend=${DOCKER_REPO}/titus-backend:${CIRCLE_WORKFLOW_ID}
workflows:
  version: 2
  test_and_build:
    jobs:
      - install
      - build:
          requires:
            - install
      - lint:
          requires:
            - install
      - test:
          requires:
            - lint
      - lighthouse:
          requires:
            - build
      - push-containers:
          requires:
            - build
            - test
            - lint
            - lighthouse
      - release-preproduction:
          requires:
            - push-containers
          filters:
            branches:
                only:
                    - master
      - request-deployment:
          type: approval
          requires:
            - release-preproduction
          filters:
            branches:
                only:
                    - master
      - release-production:
          requires:
            - request-deployment
          filters:
            branches:
                only:
                    - master
