# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, on every push
# to the master branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

on:
  push:
    branches:
      - master

name: Deploy containers to Amazon ECS

jobs:
  deploy:
    name: Deploy containers
    runs-on: ubuntu-latest
    env:
      ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      ECR_REPO_FRONTEND: "titus-frontend"
      ECR_REPO_BACKEND: "titus-backend"
      IMAGE_TAG: ${{ github.sha }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v1
      with:
        fetch-depth: 1
    
    - name: Set up Node 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x

    - name: Install and build packages
      run: |
        npm ci
        npm run create:env
        npm run build:all
      env:
        CI: true  

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Containerize frontend
      id: build-frontend
      run: |
        cd packages/titus-frontend
        docker build -t ${ECR_REGISTRY/$ECR_REPO_FRONTEND:$IMAGE_TAG

    - name: Containerize backend
      id: build-backend
      run: |
        cd packages/titus-backend
        npm prune --production
        docker build -t ${ECR_REGISTRY/$ECR_REPO_BACKEND:$IMAGE_TAG

    - name: Push Images to Amazon ECR
      id: push-images
      run: |
        docker push ${ECR_REGISTRY/$ECR_REPO_FRONTEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPO_BACKEND:$IMAGE_TAG
