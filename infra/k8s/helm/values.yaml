# Default values for ..
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

imagePullSecrets: []
pullPolicy: IfNotPresent
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

nodeSelector: {}

tolerations: []

affinity: {}

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

backend:
  image:
    repository: "titus-backend"
    # Overrides the image tag whose default is the chart appVersion.
    tag: latest
  service:
    type: ClusterIP
    port: 5000
    nodePort: 35000
  port: 5000
  host: "0.0.0.0"
  authProvider: cognito
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  
  secrets:
    - secretName: auth0-client-secret
      type: Opaque
      labels: {}
      secretKeys: 
        - key: secret
    - secretName: ad-secret
      type: Opaque
      labels: {}
      secretKeys: 
        - key: secret
    - secretName: db-password
      type: Opaque
      labels: {}
      secretKeys: 
        - key: postgresql-password
        - key: postgresql-postgres-password
      
  csi:
    enabled: false
    spc:
      type: vault 
      name: titus-backend-secrets
      address: http://vault.vault:8200
      role: backend 
      secretPathPrefix: secret/data/   

  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: titus-backend.localhost
        paths: 
          - path: /
            backend: 
              serviceName: titus-backend
              servicePort: 5000
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

frontend:
  image:
    repository: "titus-frontend"
    # Overrides the image tag whose default is the chart appVersion.
    tag: latest
  service:
    type: ClusterIP
    port: 8080
    nodePort: 35001
  port: 8080
  host: "0.0.0.0"
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: titus-frontend.localhost
        paths: 
          - path: /
            backend: 
              serviceName: titus-frontend
              servicePort: 8080
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

postgresql:
  ## @param postgresql.enabled Whether to deploy a PostgreSQL server to satisfy the database requirements
  ##
  enabled: true
  ## @param postgresql.postgresqlUsername PostgreSQL username
  ## ref: https://hub.docker.com/_/postgres/
  ##
  postgresqlUsername: titus
  ## @param postgresql.postgresqlPassword PostgreSQL password
  ## ref: https://hub.docker.com/_/postgres/
  ##
  postgresqlPassword: ""
  ## @param postgresql.postgresqlDatabase PostgreSQL database
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#creating-a-database-on-first-run
  ##
  postgresqlDatabase: titus
  ## @param postgresql.existingSecret Name of existing secret object
  ## The secret should contain the following keys:
  ## postgresql-postgres-password (for root user)
  ## postgresql-password (for the unprivileged user)
  ##
  # existingSecret: my-secret
  existingSecret: ""
  ## Enable persistence using Persistent Volume Claims
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    ## @param postgresql.persistence.enabled Enable PostgreSQL persistence using PVC
    ##
    enabled: true
    ## @param postgresql.persistence.existingClaim Provide an existing `PersistentVolumeClaim`, the value is evaluated as a template
    ##
    # existingClaim: your-claim
    existingClaim: ""
    ## @param postgresql.persistence.storageClass PVC Storage Class for PostgreSQL volume
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
    storageClass: ""
    ## @param postgresql.persistence.accessMode PVC Access Mode for PostgreSQL volume
    ##
    accessMode: ReadWriteOnce
    ## @param postgresql.persistence.size PVC Storage Request for PostgreSQL volume
    ##
    size: 8Gi
## External Database Configuration
## All of these values are only used when postgresql.enabled is set to false
externalDatabase:
  ## @param externalDatabase.host External Database server host
  ##
  host: "postgresql"
  ## @param externalDatabase.port External Database server port
  ##
  port: 5432
  ## @param externalDatabase.user External Database username
  ##
  user: titus
  ## @param externalDatabase.password External Database user password
  ##
  password: ""
  ## @param externalDatabase.database External Database database name
  ##
  database: titus
  ## @param externalDatabase.existingSecret Use an existing secret for external db password. Must contain the keys `postgres-password`
  ##
  # existingSecret: my-secret
  existingSecret: "postgresql"
